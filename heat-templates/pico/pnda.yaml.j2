parameters:
  Manager1Flavor:
    type: string
    description: Flavor for the manager nodes
    default: ec2.m3.xlarge
  EdgeFlavor:
    type: string
    description: Flavor for the edge node
    default: ec2.m3.xlarge
  BastionFlavor:
    type: string
    description: Flavor for the bastion nodes
    default: ec2.t2.medium
  KafkaFlavor:
    type: string
    description: Flavor for the kafka nodes
    default: ec2.m3.large
  DatanodeFlavor:
    type: string
    description: Flavor for the data nodes
    default: ec2.c4.xlarge
  ZookeeperNodes:
    default: '1'
    description: Number of ZOOKEEPER nodes
    type: string
  KafkaNodes:
    default: 1
    description: Number of KAFKA nodes
    type: number
  DataNodes:
    default: 1
    description: Number of DATA nodes
    type: number
  OpentsdbNodes:
    default: '2'
    description: Number of Opentsdb nodes
    type: number
  DatanodeVolumeSize:
    default: 10
    type: number
  PndaFlavor:
    description: pnda flavor
    type: string
    default: pico
  software_config_transport:
    type: string
    default: POLL_TEMP_URL
  signal_transport:
    type: string
    default: TEMP_URL_SIGNAL
resources:
  pnda_cluster:
    type: OS::Pnda::cluster
    depends_on: [ private_network_router_interface, ingest_network_router_interface ]
    properties:
      pnda_private_network: { get_resource: pnda_private_network }
      pnda_private_subnet: { get_resource: pnda_private_subnet }
#      pnda_ingest_network: { get_resource: pnda_ingest_network }
      pnda_ingest_subnet: { get_resource: pnda_ingest_subnet }
      public_net_id: { get_param: PUBLIC_NETWORK_ID }
      pnda_security_group_pnda: { get_resource: pnda_security_group_pnda}
      pnda_security_group_kafka_ingest: { get_resource: pnda_security_group_kafka_ingest}
      KeyName: { get_param: KeyName }
      deployment_name: { get_param: 'OS::stack_name' }
      image_id: { get_param: IMAGE_ID }
      EdgeFlavor: { get_param: EdgeFlavor }
      KafkaFlavor: { get_param: KafkaFlavor }
      BastionFlavor: { get_param: BastionFlavor }
      DatanodeFlavor: { get_param: DatanodeFlavor }
      Manager1Flavor: { get_param: Manager1Flavor }
      DataNodes: { get_param: DataNodes }
      DatanodeVolumeSize : { get_param: DatanodeVolumeSize }
      KafkaNodes: { get_param: KafkaNodes }
      software_config_transport: { get_param: software_config_transport }
      signal_transport: { get_param: signal_transport }
      os_user: { get_param: OS_USER }
