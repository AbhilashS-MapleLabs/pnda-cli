# pnda_cluster.yaml defines the instances to create for this flavor of PNDA
# The resource_registry.yaml file defines which yaml template to apply to
# each instance type, and these specific yaml files configure the
# instance as required for that type of node.

heat_template_version: 2015-04-30

parameters:
  image_id:
    type: string
  BastionFlavor:
    type: string
    description: Flavor for the bastion nodes
  EdgeFlavor:
    type: string
    description: Flavor for the edge node
  CMFlavor:
    type: string
    description: Flavor for the data nodes
  Manager1Flavor:
    type: string
    description: Flavor for the manager nodes
  Manager2Flavor:
    type: string
    description: Flavor for the manager nodes
  Manager3Flavor:
    type: string
    description: Flavor for the manager nodes
  Manager4Flavor:
    type: string
    description: Flavor for the manager nodes
  ToolsFlavor:
    type: string
    description: Flavor for the tools nodes
  SaltmasterFlavor:
    type: string
    description: Flavor for the Saltmaster nodes
  JupyterFlavor:
    type: string
    description: Flavor for the Jupyter nodes
  LogserverFlavor:
    type: string
    description: Flavor for the logserver node
  DatanodeFlavor:
    type: string
    description: Flavor for the data nodes
  KafkaFlavor:
    type: string
    description: Flavor for the kafka nodes
  OpentsdbFlavor:
    type: string
    description: Flavor for the opentsdb node
  ZookeeperFlavor:
    type: string
    description: Flavor for the zookeeper nodes
   
  DataNodes:
    description: Number of DATA nodes
    type: string
  KafkaNodes:
    description: Number of KAFKA nodes
    type: string
  OpentsdbNodes:
    description: Number of Opentsdb nodes
    type: number
  ZookeeperNodes:
    description: Number of ZOOKEEPER nodes
    type: string
  DatanodeVolumeSize:
    type: number
  LogVolumeSize:
    type: number
  public_net_id:
    type: string
  pnda_private_network:
    type: string
  pnda_private_subnet:
    type: string
  pnda_ingest_network:
    type: string
  pnda_ingest_subnet:
    type: string
  KeyName:
    type: string
  pnda_security_group_pnda:
    type: string
  pnda_security_group_kafka_ingest:
    type: string
  stack_name:
    type: string

resources:
  bastion:
    type: OS::Pnda::bastion
    properties:
      Flavor: { get_param: BastionFlavor }
      Image: { get_param: image_id }
      KeyName: { get_param: KeyName }
      stack_name: { get_param: stack_name }
      pnda_private_network: { get_param: pnda_private_network }
      pnda_private_subnet: { get_param: pnda_private_subnet }
      public_net_id: { get_param: public_net_id }
      pnda_security_group_pnda: { get_param: pnda_security_group_pnda }
      name:
        str_replace:
          template: '%stackname%-bastion'
          params:
            '%stackname%': { get_param: stack_name  }

  edge:
    type: OS::Pnda::edge
    properties:
      Flavor: { get_param: EdgeFlavor }
      Image: { get_param: image_id }
      KeyName: { get_param: KeyName }
      stack_name: { get_param: stack_name }
      pnda_private_network: { get_param: pnda_private_network }
      pnda_private_subnet: { get_param: pnda_private_subnet }
      pnda_security_group_pnda: { get_param: pnda_security_group_pnda }
      LogVolumeSize: { get_param: LogVolumeSize }
      name:
        str_replace:
          template: '%stackname%-hadoop-edge'
          params:
            '%stackname%': { get_param: stack_name }

  cm:
    type: OS::Pnda::cm
    properties:
      Flavor: { get_param: CMFlavor }
      Image: { get_param: image_id }
      KeyName: { get_param: KeyName }
      stack_name: { get_param: stack_name }
      pnda_private_network: { get_param: pnda_private_network }
      pnda_private_subnet: { get_param: pnda_private_subnet }
      pnda_security_group_pnda: { get_param: pnda_security_group_pnda }
      LogVolumeSize: { get_param: LogVolumeSize }
      name:
        str_replace:
          template: '%stackname%-hadoop-cm'
          params:
            '%stackname%': { get_param: stack_name }
  manager1:
    type: OS::Pnda::manager1
    properties:
      Flavor: { get_param: Manager1Flavor }
      Image: { get_param: image_id }
      KeyName: { get_param: KeyName }
      stack_name: { get_param: stack_name }
      pnda_private_network: { get_param: pnda_private_network }
      pnda_private_subnet: { get_param: pnda_private_subnet }
      pnda_security_group_pnda: { get_param: pnda_security_group_pnda }
      LogVolumeSize: { get_param: LogVolumeSize }
      name:
        str_replace:
          template: '%stackname%-hadoop-mgr-1'
          params:
            '%stackname%': { get_param: stack_name }
  manager2:
    type: OS::Pnda::manager2
    properties:
      Flavor: { get_param: Manager2Flavor }
      Image: { get_param: image_id }
      KeyName: { get_param: KeyName }
      stack_name: { get_param: stack_name }
      pnda_private_network: { get_param: pnda_private_network }
      pnda_private_subnet: { get_param: pnda_private_subnet }
      pnda_security_group_pnda: { get_param: pnda_security_group_pnda }
      LogVolumeSize: { get_param: LogVolumeSize }
      name:
        str_replace:
          template: '%stackname%-hadoop-mgr-2'
          params:
            '%stackname%': { get_param: stack_name }
  manager3:
    type: OS::Pnda::manager3
    properties:
      Flavor: { get_param: Manager3Flavor }
      Image: { get_param: image_id }
      KeyName: { get_param: KeyName }
      stack_name: { get_param: stack_name }
      pnda_private_network: { get_param: pnda_private_network }
      pnda_private_subnet: { get_param: pnda_private_subnet }
      pnda_security_group_pnda: { get_param: pnda_security_group_pnda }
      LogVolumeSize: { get_param: LogVolumeSize }
      name:
        str_replace:
          template: '%stackname%-hadoop-mgr-3'
          params:
            '%stackname%': { get_param: stack_name }
  manager4:
    type: OS::Pnda::manager4
    properties:
      Flavor: { get_param: Manager4Flavor }
      Image: { get_param: image_id }
      KeyName: { get_param: KeyName }
      stack_name: { get_param: stack_name }
      pnda_private_network: { get_param: pnda_private_network }
      pnda_private_subnet: { get_param: pnda_private_subnet }
      pnda_security_group_pnda: { get_param: pnda_security_group_pnda }
      LogVolumeSize: { get_param: LogVolumeSize }
      name:
        str_replace:
          template: '%stackname%-hadoop-mgr-4'
          params:
            '%stackname%': { get_param: stack_name }

  tools:
    type: OS::Pnda::tools
    properties:
      Flavor: { get_param: ToolsFlavor }
      Image: { get_param: image_id }
      KeyName: { get_param: KeyName }
      stack_name: { get_param: stack_name }
      pnda_private_network: { get_param: pnda_private_network }
      pnda_private_subnet: { get_param: pnda_private_subnet }
      pnda_security_group_pnda: { get_param: pnda_security_group_pnda }
      name:
          str_replace:
            template: '%stackname%-tools'
            params:
              '%stackname%': { get_param: stack_name }
  logserver:
    type: OS::Pnda::logserver
    properties:
      Flavor: { get_param: LogserverFlavor }
      Image: { get_param: image_id }
      KeyName: { get_param: KeyName }
      stack_name: { get_param: stack_name }
      pnda_private_network: { get_param: pnda_private_network }
      pnda_private_subnet: { get_param: pnda_private_subnet }
      pnda_security_group_pnda: { get_param: pnda_security_group_pnda }
      LogVolumeSize: { get_param: LogVolumeSize }
      name:
        str_replace:
          template: '%stackname%-logserver'
          params:
            '%stackname%': { get_param: stack_name }
  saltmaster:
    type: OS::Pnda::saltmaster
    properties:
      Flavor: { get_param: SaltmasterFlavor }
      Image: { get_param: image_id }
      KeyName: { get_param: KeyName }
      stack_name: { get_param: stack_name }
      pnda_private_network: { get_param: pnda_private_network }
      pnda_private_subnet: { get_param: pnda_private_subnet }
      pnda_security_group_pnda: { get_param: pnda_security_group_pnda }
      name:
        str_replace:
          template: '%stackname%-saltmaster'
          params:
            '%stackname%': { get_param: stack_name }
  jupyter:
    type: OS::Pnda::jupyter
    properties:
      Flavor: { get_param: JupyterFlavor }
      Image: { get_param: image_id }
      KeyName: { get_param: KeyName }
      stack_name: { get_param: stack_name }
      pnda_private_network: { get_param: pnda_private_network }
      pnda_private_subnet: { get_param: pnda_private_subnet }
      pnda_security_group_pnda: { get_param: pnda_security_group_pnda }
      LogVolumeSize: { get_param: LogVolumeSize }
      name:
        str_replace:
          template: '%stackname%-hadoop-jupyter'
          params:
            '%stackname%': { get_param: stack_name }

  dn:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: DataNodes }
      resource_def:
        type: OS::Pnda::dn
        properties:
          Flavor: { get_param: DatanodeFlavor }
          Image: { get_param: image_id }
          KeyName: { get_param: KeyName }
          stack_name: { get_param: stack_name }
          pnda_private_network: { get_param: pnda_private_network }
          pnda_private_subnet: { get_param: pnda_private_subnet }
          pnda_security_group_pnda: { get_param: pnda_security_group_pnda }
          DatanodeVolumeSize: { get_param: DatanodeVolumeSize }
          LogVolumeSize: { get_param: LogVolumeSize }
          NodeIndex: '%index%'
          name:
            str_replace:
              template: '%stackname%-hadoop-dn-%index%'
              params:
                '%stackname%': { get_param: stack_name }

  kafka:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: KafkaNodes }
      resource_def:
        type: OS::Pnda::kafka
        properties:
          stack_name: { get_param: stack_name }
          Flavor: { get_param: KafkaFlavor }
          Image: { get_param: image_id }
          KeyName: { get_param: KeyName }
          stack_name: { get_param: stack_name }
          pnda_private_network: { get_param: pnda_private_network }
          pnda_private_subnet: { get_param: pnda_private_subnet }
          pnda_security_group_pnda: { get_param: pnda_security_group_pnda }
          pnda_security_group_kafka_ingest: { get_param: pnda_security_group_kafka_ingest }
          NodeIndex: '%index%'
          pnda_ingest_network: { get_param: pnda_ingest_network }
          pnda_ingest_subnet: { get_param: pnda_ingest_subnet }
          LogVolumeSize: { get_param: LogVolumeSize }
          name:
            str_replace:
              template: '%stackname%-kafka-%index%'
              params:
                '%stackname%': { get_param: stack_name }
  opentsdb:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: OpentsdbNodes }
      resource_def:
        type: OS::Pnda::opentsdb
        properties:
          Flavor: { get_param: OpentsdbFlavor }
          Image: { get_param: image_id }
          KeyName: { get_param: KeyName }
          stack_name: { get_param: stack_name }
          pnda_private_network: { get_param: pnda_private_network }
          pnda_private_subnet: { get_param: pnda_private_subnet }
          pnda_security_group_pnda: { get_param: pnda_security_group_pnda }
          NodeIndex: '%index%'
          LogVolumeSize: { get_param: LogVolumeSize }
          name:
            str_replace:
              template: '%stackname%-opentsdb-%index%'
              params:
                '%stackname%': { get_param: stack_name }

  zookeeper:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: ZookeeperNodes }
      resource_def:
        type: OS::Pnda::zookeeper
        properties:
          stack_name: { get_param: stack_name }
          Flavor: { get_param: ZookeeperFlavor }
          Image: { get_param: image_id }
          KeyName: { get_param: KeyName }
          stack_name: { get_param: stack_name }
          pnda_private_network: { get_param: pnda_private_network }
          pnda_private_subnet: { get_param: pnda_private_subnet }
          pnda_security_group_pnda: { get_param: pnda_security_group_pnda }
          NodeIndex: '%index%'
          LogVolumeSize: { get_param: LogVolumeSize }
          name:
            str_replace:
              template: '%stackname%-zookeeper-%index%'
              params:
                '%stackname%': { get_param: stack_name }


